<?php
namespace Opencontent\Ocopendata\Forms\Connectors\OpendataConnector\FieldConnector;

use eZTagsObject;
use Opencontent\Ocopendata\Forms\Connectors\OpendataConnector\FieldConnector;

class TagsField extends FieldConnector
{

    const SUBTREE_LIMIT_FIELD = 'data_int1';
    const HIDE_ROOT_TAG_FIELD = 'data_int3';
    const MAX_TAGS_FIELD = 'data_int4';
    const EDIT_VIEW_FIELD = 'data_text1';

    const MODE_LIST_SELECT = 'Select';

    private $subtreeLimit;
    private $maxTagsNumber;
    private $selectionType;

    public function __construct($attribute, $class, $helper)
    {
        parent::__construct($attribute, $class, $helper);
        $this->subtreeLimit =  $attribute->attribute(self::SUBTREE_LIMIT_FIELD);
        $this->maxTagsNumber =  $attribute->attribute(self::MAX_TAGS_FIELD);
        $this->selectionType =  $attribute->attribute(self::EDIT_VIEW_FIELD);
    }

    public function getData()
    {
        return parent::getData();
    }

    public function setContent($content)
    {
        parent::setContent($content); // TODO: Change the autogenerated stub
    }

    public function getSchema()
    {
        $schema =  array(
            "type"     => 'string',
            "title"    => $this->attribute->attribute('name'),
            'required' => (bool)$this->attribute->attribute('is_required')
        );

        if ($this->subtreeLimit)
        {
            $schema['type'] = 'array';
            $schema["enum"] = $this->getDataSource( $this->subtreeLimit );
        }

        return $schema;

    }

    public function getOptions()
    {

        $options = array(
            "helper" => $this->attribute->attribute('description'),
        );
        $options["label"]  = $this->attribute->attribute('name');
        $options["name"]   = $this->getIdentifier();
        $options["subtree_limit"] = $this->subtreeLimit;

        if ( $this->subtreeLimit )
        {

            $options["multiple"] = $this->maxTagsNumber != 1;
            $options["type"] = $this->maxTagsNumber != 1 ? "checkbox" : "radio";
        }
        else
        {
            $options["locale"] = \eZINI::instance()->variable('RegionalSettings', 'ContentLocale');;
            $options["type"]   = "eztags";
        }
        return $options;

    }

    private function getDataSource( $tagID )
    {
        $result = array();
        $tag = eZTagsObject::fetch( $tagID );
        if ( !$tag instanceof eZTagsObject )
        {
            return $result;
        }
        $tags = eZTagsObject::fetchByParentID($tagID);

        foreach ($tags as $t )
        {
            $result []= $t->getKeyword();
        }
        return $result;
    }

    public function setPayload($postData)
    {
        if (is_array($postData)) {
            return empty($postData) ? null : $postData;
        }
        return explode(',', $postData);
    }
}
